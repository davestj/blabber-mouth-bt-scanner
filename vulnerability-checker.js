const fs = require('fs');
const path = require('path');
const zlib = require('zlib');

// Path to the downloaded JSON feed
// Updated by scripts/update-datasets.js
const JSON_FEED_PATH = path.join(__dirname, 'data', 'nvdcve-recent.json.gz');

// Function to unzip and parse the JSON feed
async function parseVulnerabilityFeed() {
    const jsonData = await new Promise((resolve, reject) => {
        fs.readFile(JSON_FEED_PATH, (err, data) => {
            if (err) reject(err);
            zlib.gunzip(data, (err, buffer) => {
                if (err) reject(err);
                resolve(JSON.parse(buffer.toString()));
            });
        });
    });
    return jsonData.CVE_Items;
}

// Function to search for vulnerabilities
async function checkDeviceVulnerabilities(address) {
    const knownVulns = [
        '00000000-0000-1000-8000-00805f9b34fb', // Example UUIDs, replace with actual BT UUIDs if available or known
        '00001101-0000-1000-8000-00805f9b34fb'
    ];

    const vulnerabilities = await parseVulnerabilityFeed();

    return vulnerabilities.filter(vuln => 
        vuln.cve.affects.vendor.vendor_data.some(vendor => 
            vendor.product.product_data.some(product =>
                knownVulns.includes(product.product_name)
            )
        )
    );
}

module.exports = {
    checkDeviceVulnerabilities
};
